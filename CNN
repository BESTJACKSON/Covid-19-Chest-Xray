import os
import h5py
from keras.models import load_model
from tensorflow.compiler.tf2xla.python.xla import le
from tensorflow.keras.models import Sequential, Model
from tensorflow.keras.layers import Conv2D
from tensorflow.keras.layers import SeparableConv2D
from tensorflow.keras.layers import Input
from tensorflow.keras import callbacks
from tensorflow.keras.layers import BatchNormalization
from tensorflow.keras.layers import Dropout
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.layers import Flatten
from tensorflow.keras.layers import MaxPooling2D
from tensorflow.keras.layers import Dense
from tensorflow.keras.regularizers import l2
from tensorflow.keras.optimizers import Adam
import h5py as f
from keras.models import load_model
from tensorflow.keras.preprocessing import image
import tensorflow as tf
import io
import warnings
from tensorflow.keras.utils import to_categorical
from sklearn.preprocessing import LabelBinarizer
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
import matplotlib.pyplot as plt
import numpy as np
from tensorflow.keras.preprocessing import image
from tensorflow.compat.v1 import ConfigProto
from tensorflow.compat.v1 import InteractiveSession

config = tf.compat.v1.ConfigProto(allow_soft_placement=True)
config.gpu_options.per_process_gpu_memory_fraction = 0.3
tf.compat.v1.keras.backend.set_session(tf.compat.v1.Session(config=config))

print(tf.__version__)

physical_devices = tf.config.experimental.list_physical_devices('GPU')
if len(physical_devices) > 0:
    for k in range(len(physical_devices)):
        tf.config.experimental.set_memory_growth(physical_devices[k], True)
        tf.config.experimental
        print('memory growth:', tf.config.experimental.get_memory_growth(physical_devices[k]))
else:
    print("Not enough")

# Data Processing
INIT_LR = 1e-4
EPOCHS = 15
BS = 5
train_set = ImageDataGenerator(rescale=1 / 225,
                               zoom_range=0.2,
                               # horizontal_filp=True,
                               rotation_range=15,
                               # Fill_mode="nearest"
                               )

test_set = ImageDataGenerator(rescale=1 / 225)

training_set = train_set.flow_from_directory('train',
                                             target_size=(224, 224),
                                             batch_size=BS,
                                             class_mode='categorical')

test_set = test_set.flow_from_directory('test',
                                        target_size=(224, 224),
                                        batch_size=BS,
                                        class_mode='categorical')


def build_model():
    input_img = Input(shape=(224, 224, 3), name='ImageInput')
    x = Conv2D(64, (3, 3), activation='relu', padding='same', name='Conv1_1')(input_img)
    x = Conv2D(64, (3, 3), activation='relu', padding='same', name='Conv1_2')(x)
    x = MaxPooling2D((2, 2), name='pool1')(x)

    x = SeparableConv2D(128, (3, 3), activation='relu', padding='same', name='Conv2_1')(x)
    x = SeparableConv2D(128, (3, 3), activation='relu', padding='same', name='Conv2_2')(x)
    x = MaxPooling2D((2, 2), name='pool2')(x)

    x = SeparableConv2D(256, (3, 3), activation='relu', padding='same', name='Conv3_1')(x)
    x = BatchNormalization(name='bn1')(x)
    x = SeparableConv2D(256, (3, 3), activation='relu', padding='same', name='Conv3_2')(x)
    x = BatchNormalization(name='bn2')(x)
    x = SeparableConv2D(256, (3, 3), activation='relu', padding='same', name='Conv3_3')(x)
    x = MaxPooling2D((2, 2), name='pool3')(x)

    # x = SeparableConv2D(512, (3,3), activation='relu', padding='same', name='Conv4_1')(x)
    # x = BatchNormalization(name='bn3')(x)
    # x = SeparableConv2D(512, (3,3), activation='relu', padding='same', name='Conv4_2')(x)
    # x = BatchNormalization(name='bn4')(x)
    # x = SeparableConv2D(512, (3,3), activation='relu', padding='same', name='Conv4_3')(x)
    # x = MaxPooling2D((2,2), name='pool4')(x)

    x = Flatten(name='flatten')(x)
    x = Dense(512, activation='relu', name='fc1')(x)
    x = Dropout(0.5, name='dropout1')(x)
    x = Dense(128, activation='relu', name='fc2')(x)
    x = Dropout(0.5, name='dropout2')(x)
    x = Dense(2, activation='softmax', name='fc3')(x)
    x = Dropout(0.5, name='dropout3')(x)

    model = Model(inputs=input_img, outputs=x)
    return model


model = build_model()
# model.compile(loss="categorical_crossentropy", metrics=['accuracy'], optimizer='adam')
model.summary()

f = h5py.File('detection_h5/detection.h5', 'r')
# Select the layers for which you want to set weight.
w, b = f['block1_conv1']['block1_conv1_W_1:0'], f['block1_conv1']['block1_conv1_b_1:0']
model.layers[1].set_weights = [w, b]

w, b = f['block1_conv2']['block1_conv2_W_1:0'], f['block1_conv2']['block1_conv2_b_1:0']
model.layers[2].set_weights = [w, b]

w, b = f['block2_conv1']['block2_conv1_W_1:0'], f['block2_conv1']['block2_conv1_b_1:0']
model.layers[4].set_weights = [w, b]

w, b = f['block2_conv2']['block2_conv2_W_1:0'], f['block2_conv2']['block2_conv2_b_1:0']
model.layers[5].set_weights = [w, b]

f.close()
model.summary()

# Training phase
opt = Adam(lr=0.0001, decay=1e-5)
es = callbacks.EarlyStopping(patience=18)
modelCP = tf.keras.callbacks.ModelCheckpoint(filepath='filepath', save_best_only=True, save_weights_only=False)
model.compile(loss="categorical_crossentropy", metrics=['accuracy'], optimizer=opt)
history = model.fit(training_set, steps_per_epoch=186, validation_data=test_set,
                    validation_steps=94, callbacks=[es, modelCP])

testimg = image.load_img("train/NORMAL", target_size=(224, 224))
target_size = (224, 224)
testimg = image.img_to_array(testimg)
testimg = np.expand_dims(testimg, axis=0)
testimg = testimg / 255.0
result1 = model.predict(testimg)
print(result1)
print(training_set.class_indices)


